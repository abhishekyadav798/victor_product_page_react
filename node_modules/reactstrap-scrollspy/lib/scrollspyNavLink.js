"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactstrap = require("reactstrap");

var _scrollspyContext = _interopRequireDefault(require("./scrollspyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function ScrollspyNavLink(_ref) {
  var name = _ref.name,
      children = _ref.children;

  var _useContext = (0, _react.useContext)(_scrollspyContext["default"]),
      updatedName = _useContext.updatedName,
      updateNavbar = _useContext.updateNavbar;

  return _react["default"].createElement("div", {
    "data-test": "component-scrollspy-nav-link"
  }, children.type === _reactstrap.NavLink ? _react["default"].cloneElement(children, {
    active: name === updatedName,
    onClick: function onClick() {
      return updateNavbar(name);
    }
  }) : children);
}

var _default = ScrollspyNavLink;
exports["default"] = _default;