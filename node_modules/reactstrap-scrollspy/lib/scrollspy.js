"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _inView = _interopRequireDefault(require("./inView"));

var _scrollspyContext = _interopRequireDefault(require("./scrollspyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Scrollspy = function Scrollspy(_ref) {
  var names = _ref.names,
      homeIndex = _ref.homeIndex,
      topOffset = _ref.topOffset,
      bottomOffset = _ref.bottomOffset,
      delayMs = _ref.delayMs,
      children = _ref.children;

  var _useState = (0, _react.useState)(names[homeIndex || 0]),
      _useState2 = _slicedToArray(_useState, 2),
      activeName = _useState2[0],
      setActiveName = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isClicked = _useState4[0],
      setIsClicked = _useState4[1];

  var changeActiveName = function changeActiveName(name) {
    if (!isClicked) {
      setActiveName(name);
    }
  };

  var changeActiveNameLazily = function changeActiveNameLazily(name) {
    setIsClicked(true);
    setTimeout(function () {
      setActiveName(name);
      setIsClicked(false);
    }, delayMs);
  };

  return _react["default"].createElement("div", {
    "data-test": "component-scrollspy"
  }, _react["default"].createElement(_scrollspyContext["default"].Provider, {
    value: {
      updatedName: activeName,
      updateNavbar: changeActiveNameLazily
    }
  }, children.map(function (component, index) {
    if (names[index] === null) {
      return _react["default"].cloneElement(component, {
        key: index
      });
    }

    return _react["default"].createElement(_inView["default"], {
      key: index,
      onEnter: function onEnter() {
        return changeActiveName(names[index]);
      },
      topOffset: topOffset,
      bottomOffset: bottomOffset
    }, component);
  })));
};

Scrollspy.defaultProps = {
  homeIndex: 0,
  topOffset: '50%',
  bottomOffset: '40%',
  delayMs: 50
};
var _default = Scrollspy;
exports["default"] = _default;